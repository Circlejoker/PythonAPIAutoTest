{"name": "test_recharge[case3]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <testcase.test_2_recharge.TestRecharge object at 0x0000000005F54128>\ncase = {'assert_db': '[{\"sql\":\"select leave_amount from member where id=27\",\"expected\":{\"leave_amount\":3074502.94+500.01},\"db...amount\",\"expected\":3074502.94+500.01,\"type\":\"eq\"}]', 'extract': '{\"leave_amount\":\"$..leave_amount\"}', 'id': '004', ...}\nclass_init = <Common.my_data.Data object at 0x0000000005F9B898>\n\n    @pytest.mark.parametrize(\"case\",cases)\n    def test_recharge(self, case,class_init):\n        # 这个share_data/class_init就是Data类实例化对象\n        share_data = class_init\n        # 1、接收前置的返回值 -- 上一个接口的返回值，提取出来\n        case=replace_case_with_re(case,share_data)\n    \n        # 2、将替换之后的请求数据（json格式的字符串），转换成一个字典\n        rep_dict = json.loads(case[\"req_data\"])\n    \n        # 3、发起请求，并接收响应请求\n        if hasattr(share_data,\"token\"):\n            resp = mq.send_requests(case[\"url\"],case[\"method\"], rep_dict ,token=getattr(share_data, \"token\"))\n        else:\n            resp = mq.send_requests(case[\"url\"],case[\"method\"],rep_dict)\n            logger.info(resp.json())\n    \n        # 4、提取响应结果中的数据\n        if case[\"extract\"]:\n            extract_data_from_response(case[\"extract\"], resp.json(),share_data)\n    \n        # 结果空列表\n        assert_res = []\n    \n        # 5、断言响应结果里的数据      //这步骤做了对于面试比较加分，属于自行封装断言\n        if case[\"assert_list\"]:\n            response_check_res = massert.assert_response_value(case[\"assert_list\"],resp.json())\n            assert_res.append(response_check_res)\n    \n        if False in assert_res:\n            pass\n        else:\n            # 4、提取响应结果里的数据，并设置为全局变量\n            if case[\"extract\"]:\n                # 调用提取处理函数\n                extract_data_from_response(case[\"extract\"],resp.json(),share_data)\n    \n        # 6、断言数据库 -sql语句、结果实际、比对的类型\n        if case[\"assert_db\"]:\n            db_check_res= massert.assert_db(case[\"assert_db\"])\n            assert_res.append(db_check_res)\n    \n        # 最终抛出异常\n        if False in assert_res:\n>           raise AssertionError\nE           AssertionError\n\ntestcase\\test_2_recharge.py:96: AssertionError"}, "parameters": [{"name": "case", "value": "{'id': '004', '用例名称': '普通用户充值500.01元成功', '所属模块': '充值', 'method': 'post', 'url': 'member/recharge', 'req_data': '{\"member_id\":\"#member_id#\",\"amount\":\"500.01\"}', 'extract': '{\"leave_amount\":\"$..leave_amount\"}', 'assert_list': '[{\"expr\":\"$.code\",\"expected\":0,\"type\":\"eq\"},{\"expr\":\"$.msg\",\"expected\":\"OK\",\"type\":\"eq\"},{\"expr\":\"$..leave_amount\",\"expected\":#leave_amount#+500.01,\"type\":\"eq\"}]', 'assert_db': '[{\"sql\":\"select leave_amount from member where id=#member_id#\",\"expected\":{\"leave_amount\":#leave_amount#+500.01},\"db_type\":\"eq\"}]'}"}], "start": 1658200219120, "stop": 1658200219210, "uuid": "42e87654-6473-46f2-8f58-bd563d48bc48", "historyId": "9a1778efae6c96ca0965099e5b3736b4", "testCaseId": "2bc86fd57df21709528b5bb2eedd7119", "fullName": "testcase.test_2_recharge.TestRecharge#test_recharge", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('class_init')"}, {"name": "tag", "value": "recharge"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_2_recharge"}, {"name": "subSuite", "value": "TestRecharge"}, {"name": "host", "value": "Chen-PC"}, {"name": "thread", "value": "11716-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_2_recharge"}]}